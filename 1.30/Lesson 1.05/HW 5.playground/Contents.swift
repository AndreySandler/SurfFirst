import UIKit

//: # Home Work 5
/*:
 ## Задание 1
 Создайте словарь, который содержит результаты игр спортивной команды. Ключом словаря должно быть название команды соперника, а в качестве значения должен быть массив с результатами игр с этим соперником. Необходимо вывести на консоль результаты игр. Выглядеть это должно примерно следующим образом:
 
 - Игра с Салават Юлаев - 3:6
 
 - Игра с Салават Юлаев - 5:5
 
 - Игра с Салават Юлаев - N/A
 
 - Игра с Авангард - 2:1
 
 - Игра с АкБарс - 3:3
 
 - Игра с АкБарс - 1:2
 */
let gamesResults = [
    "Салават Юлаев": ["3:6", "5:5", "N/A"],
    "Авангард": ["2:1"],
    "АкБарс": ["3:3", "1:2"]
]

for (team, counts) in gamesResults {
    for count in counts {
        print("Игра с \(team) - \(count)")
    }
}

/*:
 ## Задание 2
 Создайте функцию, которая считает общую сумму переданных в нее целочисленных значений и возвращает итоговый результат. Числа можно передавать либо в массиве, либо по отдельности, на ваше усмотрение. Вызовите функцию.
 */
func findsTheSum(_ numbers: Int...) -> Int {
    var total = 0
    for number in numbers {
        total += number
    }
    return total
}

findsTheSum(2, 3, 6, 8)

/*:
 ## Задание 3
 3.1 Создайте функцию, которая определяет является ли число четным. В случае, если число является четным, функция должна возвращать `true`. Иначе - `false`.
 */
func definesParity(_ a: Int) -> Bool {
    a % 2 == 0
}

definesParity(2)


/*:
 3.2 Создайте функцию, которая определяет делится ли число на *3* без остатка. Функция так же должна возвращать булево значение.
 */
func definesParityThree(_ a: Int) -> Bool {
    a % 3 == 0
}

definesParityThree(21)


/*:
 3.3 Создайте функцию, которая возвращает возрастающий массив чисел в интервале от *x* до *y*. Данный интервал должен задаваться при вызове функции при помощи параметров. Вы должны самостоятельно реализовать логику создания массива. Если хотите усложнить задание, то можете возвращать не сортированный массив чисел в заданном интервале. Главное, что бы числа были уникальными и не повторялись. При этом количество элементов массива должно соответствовать количеству элементов заданного интервала.
 */
//Array(1...100) // Не принимается
func createNumbers(_ x: Int, to y: Int) -> [Int] {
    var integers: [Int] = []
    for integer in x...y {
        integers += [integer]
    }
    return integers
}
/*:
 3.4 Создайте массив чисел от *1* до *100*, используя для этого выше созданную функцию
 */
var integers = createNumbers(1, to: 100)

/*:
 3.5 Создайте функцию для фильтрации переданного в неё массива. Функция должна возвращать новый массив без четных чисел. Для определения фильтруемых значений используйте ранее созданную функцию из задания **3.1**.
 */
func filteringOddArray(_ oddIntegers: [Int]) -> [Int]  {
    var oddIntegers: [Int] = []
    for integer in integers {
        if !definesParity(integer) {
            oddIntegers += [integer]
        }
    }
    return oddIntegers
}

filteringOddArray(integers)
/*:
 3.6 Создайте функцию для фильтрации переданного в неё массива. Функция должна возвращать новый массив без чисел кратных трем. Для определения фильтруемых значений используйте ранее созданную функцию из задания **3.2**.
 */
func filteringOddThreeArray(_ oddThreeIntegers: [Int]) -> [Int]  {
    var oddThreeIntegers: [Int] = []
    for integer in integers {
        if !definesParityThree(integer) {
            oddThreeIntegers += [integer]
        }
    }
    return oddThreeIntegers
}

filteringOddThreeArray(integers)

//3.7 Отфильтруйте массив из задания 3.4 при помощи двух последних функций

integers = filteringOddArray(integers)
integers = filteringOddThreeArray(integers)



